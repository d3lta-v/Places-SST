//
//  PlacesKit.m
//  Places@SST
//
//  Created by Pan Ziyue on 30/12/14.
//  Copyright (c) 2014 StatiX Industries. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PlacesKit.h"


@implementation PlacesKit

#pragma mark Cache

static UIImage* _imageOfCanvas1 = nil;
static UIImage* _imageOfCanvas2 = nil;
static UIImage* _imageOfCanvas3 = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawCanvas1;
{
    //// Color Declarations
    UIColor* inner = [UIColor colorWithRed: 0.251 green: 0.643 blue: 0.906 alpha: 1];
    UIColor* middle = [UIColor colorWithRed: 0.141 green: 0.545 blue: 0.812 alpha: 1];
    UIColor* outer = [UIColor colorWithRed: 0 green: 0.294 blue: 0.486 alpha: 1];
    UIColor* middleText = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.4];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 10, 280, 280)];
    [outer setStroke];
    ovalPath.lineWidth = 20;
    [ovalPath stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30, 30, 240, 240)];
    [middle setStroke];
    oval3Path.lineWidth = 20;
    [oval3Path stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50, 50, 200, 200)];
    [inner setStroke];
    oval2Path.lineWidth = 20;
    [oval2Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(60, 60, 180, 180)];
    [middleText setFill];
    [oval4Path fill];
}

+ (void)drawCanvas2;
{
    //// Color Declarations
    UIColor* inner = [UIColor colorWithRed: 0.251 green: 0.643 blue: 0.906 alpha: 1];
    UIColor* middle = [UIColor colorWithRed: 0.141 green: 0.545 blue: 0.812 alpha: 1];
    UIColor* middleText = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.4];

    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50, 50, 200, 200)];
    [inner setStroke];
    oval2Path.lineWidth = 20;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30, 30, 240, 240)];
    [middle setStroke];
    oval3Path.lineWidth = 20;
    [oval3Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(60, 60, 180, 180)];
    [middleText setFill];
    [ovalPath fill];
}

+ (void)drawCanvas3;
{
    //// Color Declarations
    UIColor* inner = [UIColor colorWithRed: 0.251 green: 0.643 blue: 0.906 alpha: 1];

    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50, 50, 200, 200)];
    [inner setStroke];
    oval2Path.lineWidth = 20;
    [oval2Path stroke];
}

#pragma mark Generated Images

+ (UIImage*)imageOfCanvas1;
{
    if (_imageOfCanvas1)
        return _imageOfCanvas1;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(300, 300), NO, 0.0f);
    [PlacesKit drawCanvas1];
    _imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas1;
}

+ (UIImage*)imageOfCanvas2;
{
    if (_imageOfCanvas2)
        return _imageOfCanvas2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(300, 300), NO, 0.0f);
    [PlacesKit drawCanvas2];
    _imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas2;
}

+ (UIImage*)imageOfCanvas3;
{
    if (_imageOfCanvas3)
        return _imageOfCanvas3;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(300, 300), NO, 0.0f);
    [PlacesKit drawCanvas3];
    _imageOfCanvas3 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas3;
}

#pragma mark Customization Infrastructure

- (void)setCanvas1Targets: (NSArray*)canvas1Targets
{
    _canvas1Targets = canvas1Targets;

    for (id target in self.canvas1Targets)
        [target setImage: PlacesKit.imageOfCanvas1];
}

- (void)setCanvas2Targets: (NSArray*)canvas2Targets
{
    _canvas2Targets = canvas2Targets;

    for (id target in self.canvas2Targets)
        [target setImage: PlacesKit.imageOfCanvas2];
}

- (void)setCanvas3Targets: (NSArray*)canvas3Targets
{
    _canvas3Targets = canvas3Targets;

    for (id target in self.canvas3Targets)
        [target setImage: PlacesKit.imageOfCanvas3];
}


@end
